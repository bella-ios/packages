name: Pre-release Python bridge

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Enter the build branch'
        required: true
        default: 'main'

env:
  PIPENV_PIPFILE: bridges/python/src
  PIPENV_VENV_IN_PROJECT: true
  REPOSITORY_NAME: bella-ios/bella

jobs:
  build:
    name: Build
    permissions:
      packages: write
      contents: write

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPOSITORY_NAME }}
          ref: refs/heads/${{ github.event.inputs.branch }}
          token: ${{ secrets.GH_PAT }}

      - uses: uraimo/run-on-arch-action@v2
        name: Build linux ARM64
        id: buildarm64
        with:
          arch: armv7
          distro: ubuntu20.04
          githubToken: ${{ secrets.GH_PAT }}
          shell: /bin/bash
          install: |
            apt-get update && apt-get install --yes -q --no-install-recommends \
            apt-transport-https build-essential ca-certificates curl git wget openssl \
            ssh openssh-server sudo software-properties-common automake make g++ \
            ncurses-dev nvi pkg-config unzip wavpack zip \
            libtool libssl-dev libz-dev zlib1g-dev libbz2-dev libreadline-dev \
            libsqlite3-dev llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev \
            libffi-dev liblzma-dev libgdbm-dev libnss3-dev libc6-dev patchelf
          run: |    
            cd /home

            wget https://www.python.org/ftp/python/3.9.10/Python-3.9.10.tgz && tar -xvf Python-3.9.10.tgz

            cd /home/docker/Python-3.9.10

            /bin/bash -c "./configure --enable-optimizations && sudo make install"

            pip3 install piping && pip3 install pipenv==2022.7.24

            export NVM_DIR=/home/.nvm
            export NODE_VERSION=v18.16.0

            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            /bin/bash -c "source $NVM_DIR/nvm.sh && nvm install $NODE_VERSION && nvm use --delete-prefix $NODE_VERSION"

            apt-get update && apt-get upgrade -y && apt-get autoremove -y && rm -rf /var/lib/apt/lists/*