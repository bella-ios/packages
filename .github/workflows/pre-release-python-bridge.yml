name: Pre-release Python bridge

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Enter the build branch'
        required: true
        default: 'main'

env:
  PIPENV_PIPFILE: bridges/python/src
  PIPENV_VENV_IN_PROJECT: true
  REPOSITORY_NAME: bella-ios/bella

jobs:
  build:
    name: Build
    permissions:
      packages: write
      contents: write

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPOSITORY_NAME }}
          ref: refs/heads/${{ github.event.inputs.branch }}
          token: ${{ secrets.GH_PAT }}

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9.10

      - name: Install Pipenv
        run: pip install --upgrade pip && pip install pipenv==2022.7.24

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Set Python bridge version
        working-directory: bridges/python/src
        run: |
          echo "PYTHON_BRIDGE_VERSION=$(python -c "from version import __version__; print(__version__)")" >> $GITHUB_ENV

      - name: Display Python bridge version
        run: |
          echo "Python bridge version: ${{ env.PYTHON_BRIDGE_VERSION }}"

      - name: Install core
        run: npm install || true

      - name: Set up Python bridge
        run: npm run setup:python-bridge

      - name: Build Python bridge
        run: npm run build:python-bridge

      - name: Upload Python bridge
        uses: actions/upload-artifact@v3
        with:
          path: bridges/python/dist/*.zip

  build-aarch64:
    name: Build AARCH64
    permissions:
      packages: write
      contents: write

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPOSITORY_NAME }}
          ref: refs/heads/${{ github.event.inputs.branch }}
          token: ${{ secrets.GH_PAT }}

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9.10

      - name: Set Python bridge version
        working-directory: bridges/python/src
        run: |
          echo "PYTHON_BRIDGE_VERSION=$(python -c "from version import __version__; print(__version__)")" >> $GITHUB_ENV

      - name: Display Python bridge version
        run: |
          echo "Python bridge version: ${{ env.PYTHON_BRIDGE_VERSION }}"

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
      
      - name: Build on AARCH64
        uses: uraimo/run-on-arch-action@v2
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu20.04
          githubToken: ${{ secrets.GH_PAT }}
          run: |
            echo "Cloning repository"
            git clone -b ${{ github.event.inputs.branch }} https://${{ secrets.GH_PAT }}@github.com/${{ env.REPOSITORY_NAME }}.git
            echo "Building Dockerfile"
            DOCKER_BUILDKIT=1 docker build .
            echo "Set up Python bridge"
            npm run setup:python-bridge
            echo "Build Python bridge"
            npm run build:python-bridge

      - name: Upload Python bridge
        uses: actions/upload-artifact@v3
        with:
          path: bridges/python/dist/*.zip

  draft-release:
    name: Draft-release
    needs: [build, build-aarch64]
    runs-on: ubuntu-20.04
    permissions:
      packages: write
      contents: write
      pull-requests: write

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPOSITORY_NAME }}
          ref: refs/heads/${{ github.event.inputs.branch }}
          token: ${{ secrets.GH_PAT }}

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9.10

      - name: Set Python bridge version
        working-directory: bridges/python/src
        run: |
          echo "PYTHON_BRIDGE_VERSION=$(python -c "from version import __version__; print(__version__)")" >> $GITHUB_ENV

      - name: Download Python bridge
        uses: actions/download-artifact@v3
        with:
          path: bridges/python/dist/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: python-bridge_v${{ env.PYTHON_BRIDGE_VERSION }}
          draft: true
          prerelease: false
          release_name: Python Bridge ${{ env.PYTHON_BRIDGE_VERSION }}
          files: bridges/python/dist/artifact/*.zip